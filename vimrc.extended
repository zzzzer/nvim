"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" GUI
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" Show < or > when characters are not displayed on the left or right.
:set list listchars=precedes:<,extends:>
" Same, but also show tabs and trailing spaces.
:set list listchars=tab:>-,trail:.,precedes:<,extends:>

if has("gui_running")
  :colorscheme zenburn
  ":colorscheme eclipse
    "if has("gui_gtk2")
        "set guifont=Courier\ New\ 9
    "elseif has("gui_kde")
        "echoerr "Sorry, please look into your kvim documentation"
    "elseif has("x11")
        "set guifont=-*-courier-medium-r-normal-*-*-180-*-*-m-*-*
    "else
        "set guifont=Courier_New:h11:cDEFAULT
    "endif
"set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim 
" use nerdtree
autocmd VimEnter * NERDTree
" remove the wierd characters you get sometimes and use plus instead for browsing
let g:NERDTreeDirArrows=0
" jump to previous windows after opening nerdtree 
autocmd VimEnter * wincmd p
" shut down vim if nerdtree is the last window 
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
endif

"
" Controls how file tabs are displayed
"
" Forinfo on this one, see http://blog.golden-ratio.net/2008/08/19/using-tabs-in-vim/
"
if v:version >= 700
  function! GuiTabLabel()
        " add the tab number
        let label = '['.tabpagenr()

        " modified since the last save?
        let buflist = tabpagebuflist(v:lnum)
        for bufnr in buflist
                if getbufvar(bufnr, '&modified')
                        let label .= '*'
                        break
                endif
        endfor

        " count number of open windows in the tab
        let wincount = tabpagewinnr(v:lnum, '$')
        if wincount > 1
                let label .= ', '.wincount
        endif
        let label .= '] '

        " add the file name without path information
        let n = bufname(buflist[tabpagewinnr(v:lnum) - 1])
        let label .= fnamemodify(n, ':t')

        return label
  endfun
  set guitablabel=%{GuiTabLabel()}
endif



"remapping this in tasklist from leader t to leader tt to resolve conflict with other plugins
map <leader>tt <Plug>TaskList

"use  pathogen for installation for plugins that use



execute pathogen#infect() 
"call pathogen#incubate()
call pathogen#helptags()
syntax on
filetype plugin indent on

"ctrl p plugin 
set runtimepath^=~/.vim/bundle/ctrlp.vim

" python stuff
so ~/.vim/vimrc.python


